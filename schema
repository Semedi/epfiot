schema {
  query: Query
  mutation: Mutation
}

"The query type, represents all of the entry points into our object graph"
type Query {
  getUser(id: ID!): User
  getUsers(): [User]
  getVm(id: ID!): Vm
  getDev(id: ID!): Hostdev
  getThing(id: ID!): Thing
  getVms(): [Vm]
  getUsb(): [Hostdev]
}

"The mutation type, represents all updates we can make to our data"
type Mutation {
  createVm(vm: VmInput!): Vm
  updateVm(vm: VmInput!): Vm
  deleteVm(userID: ID!, vmID: ID!): Boolean
  createThing(thing: ThingInput!): Thing
  createThingVm(thing: ThingInput!, vmID: ID!): Thing
  attachThing(thingID: ID!, vmID: ID!): Boolean
  attachDevice(devID: ID!, vmID: ID!): Boolean
  detachDevice(devID: ID!, vmID: ID!): Boolean
  powerON(vmID: ID!): Vm
  powerOFF(vmID: ID!): Vm
  destroyVM(vmID: ID!): Boolean
  forceDestroyVM(vmID: ID!): Boolean
  forceOFF(vmID: ID!): Boolean
}

"what is needed for a vm"
type Vm {
  id: ID
  owner: User
  name: String
  base: String
  vcpu: Int
  memory: Int
  ip: String
  state: String
  dev: [Hostdev]
  things: [Thing]
}

"Hostdev has everything needed for a host device"
type Hostdev {
  id: ID
  bus: String
  device: String
  info  : String
}

type Thing {
  id: ID
  name: String
  info: String
}

"what is needed for a user"
type User {
  id: ID
  name: String
  # user vms exposed as a full list
  vms: [Vm]
  # user vms exposed as a connection with edges
  vmsConnection(first: Int, after: ID): UserVmConnection!
}

"The connection between users and vms"
type UserVmConnection {
  totalCount: Int!
  edges: [UserVmEdge]
  pageInfo: PageInfo!
}

"The edge of the user vm connection"
type UserVmEdge {
  cursor: ID!
  node: Vm
}

"Page info for pagination"
type PageInfo {
  startCursor: ID
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input VmInput {
  id: ID
  base: String!
  name: String!
  memory: Int = 256
  vcpu:   Int = 1
  devIDs: [Int]
  thingIDs: [Int]
  config: ConfigInput
}

input ConfigInput {
  user: String
  password: String
}

input ThingInput {
  id: ID
  name: String!
  info: String!
}
